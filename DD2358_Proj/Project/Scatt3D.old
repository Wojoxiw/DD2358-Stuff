# encoding: utf-8
### Modification of scatt2d to handle 3d geometry
# Old version, used for testing and initial coding
# Stripped down for simplicity for DD2358 course
#
# Adapted from 2D code started by Daniel Sjoberg, 2024-12-13
# Alexandros Pallaris, after that

import os
os.environ["OMP_NUM_THREADS"] = "1" # seemingly needed for MPI speedup
from mpi4py import MPI
import numpy as np
import dolfinx, ufl, basix
import dolfinx.fem.petsc
import gmsh
from scipy.constants import pi, c as c0
from matplotlib import pyplot as plt
import pyvista as pv
import pyvistaqt as pvqt
import functools
from timeit import default_timer as timer
import sys, petsc4py
petsc4py.init(sys.argv)
from petsc4py import PETSc
import psutil
import scipy
from memory_profiler import memory_usage


def memTimeEstimation(numCells = 0, Nf = 0, printPlots = False):
    '''
    Estimates the execution time and memory requirements of the Scatt3d run, based on previous runs.
    
    Previous run information is stored in prevRuns.info in the same folder as this script.
    Assumes that the memory cost scales with the volume of the computation/h^3 (the number of mesh cells).
    Time taken should then scale with the memory times the number of frequency points.
    
    
    :param numCells: estimated number of mesh cells, if asking for an estimated time/memory cost
    :param Nf: number of freq. points, when asking for an estimated time
    :param printPlots: if True, plots the memory and time requirements of previous runs, along with the fit used for estimation
    '''
    data = np.loadtxt('prevRuns.info', skiprows = 2) ## mems, times, ncells, Nfs
    
    line = lambda x, a, b: a*x + b # just fit the data to a line
    
    ###############
    # TIME STUFF
    ###############
    idx = np.argsort(data[:,1]) ## sort by time
    times, ncells, Nfs = data[idx, 1], data[idx, 2], data[idx, 3]
    fit = scipy.optimize.curve_fit(line, ncells*Nfs, times)[0]
    time = line(numCells*Nf, fit[0], fit[1])
    
    if(printPlots):
        xs = np.linspace(np.min(ncells*Nfs), np.max(ncells*Nfs), 1000)
        plt.plot(ncells, times/3600, '-o', label='runs on computer')
        plt.title('Computation time by size')
        plt.xlabel(r'(# of mesh cells)*(# of frequencies)')
        plt.ylabel('Time [hours]')
        plt.grid()
        plt.plot(xs, line(xs, fit[0], fit[1])/3600, label='curve_fit')
        if(numCells>0 and Nf>0):
            plt.scatter(numCells*Nf, time/3600, s = 80, facecolors = None, edgecolors = 'red', label = 'Estimated Time')
        plt.legend()
        plt.tight_layout()
        plt.show()

    ###############
    # MEMORY STUFF
    ###############
    idxMemsRecorded = np.argwhere(data[:,0] > 0)[:, 0] ## only take data where the memory cost is actually recorded, for memory estimation (this should be always now)
    mems, ncells = data[idxMemsRecorded, 0], data[idxMemsRecorded, 2]
    idx = np.argsort(mems) ## sort by mem
    mems, ncells= mems[idx], ncells[idx]
    
    fitMem = scipy.optimize.curve_fit(line, ncells, mems)[0]
    mem = line(numCells, fitMem[0], fitMem[1])
    
    if(printPlots):
        xs = np.linspace(np.min(ncells), np.max(ncells), 1000)
        plt.plot(ncells, mems, '-o', label='runs on computer')
        plt.title('Memory Requirements by size')
        plt.xlabel(r'# of mesh cells')
        plt.ylabel('Memory [GB] (Approximate)')
        plt.grid()
        plt.plot(xs, line(xs, fitMem[0], fitMem[1]), label='curve_fit')
        if(numCells>0 and Nf>0):
            plt.scatter(numCells, mem, s = 80, facecolors = None, edgecolors = 'red', label = 'Estimated Memory')
        plt.legend()
        plt.tight_layout()
        plt.show()
    
    
    return mem, time

def memTimeAppend(numCells, Nf, mem, time, reference, folder = ''):
    '''
    Appends a run's data to the estimation datafile
    
    :param folder: folder to store and retrieve prevRuns.info
    :param numCells: estimated number of mesh cells, if asking for an estimated time/memory cost
    :param Nf: number of freq. points, when asking for an estimated time
    :param mem: max. memory usage, in GiB
    :param time: total runTime, in s
    :param reference: True if this is a reference run (prints 1), False (or 0) otherwise
    '''
    file = open(folder+'prevRuns.info','a')
    #file.write("\n")
    np.savetxt(file, np.array([mem, time, numCells, Nf, reference]).reshape(1, 5), fmt='%1.5e')
    file.close()

def runScatt3d(runName, reference = False, folder = 'data3D/', verbose=True, viewGMSH=False):
    '''
    Runs a scattering simulation

    :param runName: this will be prepended to the various saved filenames
    :param reference: runs without any defects contained in the mesh - possibly saves only what's needed for calculations, too
    :param folder: folder to save data and stuff in
    :param verbose: prints some extra stuff about how many freqs have been calculated (things you dont want to see when iterating)
    :param viewGMSH: to just make the mesh, view it with fltk, then close
    '''
    
    startTime = timer()
    
    # Physical constants and geometry dimension
    mu0 = 4*np.pi*1e-7
    eps0 = 1/c0**2/mu0
    eta0 = np.sqrt(mu0/eps0)
    tdim = 3
    fdim = tdim - 1
    
    # Simulation variables
    f0 = 10e9                       # Design frequency
    f1 = 8e9                        # Start frequency
    f2 = 12e9                       # Stop frequency
    global Nf
    Nf = 1                          # Number of frequency points
    fvec = np.linspace(f1, f2, Nf)  # Vector of simulation frequencies
    lambda0 = c0/f0                 # Design wavelength
    k0 = 2*np.pi/lambda0            # Design wavenumber
    h = lambda0/12                  # Mesh size  (normally lambda0/20 with degree 1 fem is what we have used)
    fem_degree = 1                  # Degree of finite elements
    
    R_dom = .8*lambda0                 # Radius of domain
    d_pml = lambda0                    # Thickness of PML
    R_pml = R_dom + d_pml              # Outer radius of PML
    height_dom = 0.5*lambda0           # Height of domain - goes from -height/2 to height/2
    height_pml = height_dom + 2*d_pml  # Height of PML - goes from -height/2 to height/2
    
    d_spheroid = 0.1*lambda0           # max. extra thickness/height of the oblate spheroid added to the domain and pml to obtain a domed ceiling
    if(d_spheroid>0): ## add a spheroid domed top and bottom with some specified extra height, that passes through the cylindrical 'corner' (to try to avoid waves being parallel to the PML)
        R_extra_spheroid_dom = R_dom*(-1 + np.sqrt(1-( 1 - 1/(1- (height_dom/2/(height_dom/2+d_spheroid))**2 ) )) )       # how far beyond the domain the spheroid goes, radially. this will not actually be part of the domain. find using optimization
        a_dom = (height_dom/2+d_spheroid)/(R_dom+R_extra_spheroid_dom)
        R_extra_spheroid_pml = R_pml*(-1 + np.sqrt(1-( 1 - 1/(1- (height_pml/2/(height_pml/2+d_spheroid))**2 ) )))
        a_pml = (height_pml/2+d_spheroid)/(R_pml+R_extra_spheroid_pml)
    
    # Antennas - using a box where 1 surface is the antenna
    polarization = 'vert'           # Choose between 'vert' and 'horiz'
    antenna_width = 0.7625*lambda0  # Width of antenna apertures, 22.86 mm
    antenna_height = 0.3625*lambda0 # Height of antenna apertures
    antenna_depth = lambda0/10      # Depth of antenna box
    antenna_z_offset = 0 #lambda0/2    # raise the antennas in z to create asymmetry in z
    kc = np.pi/antenna_width        # Cutoff wavenumber of antenna
    N_antennas = 2                  # Number of antennas
    
    R_sphere = 0.2*lambda0          # Radius of the PEC sphere
    R_antennas = R_dom - .32*lambda0          # Radius at which antennas are placed - close to the edge, for maximum dist?
    antenna_angular_spacing = 120         # angular spacing between the antennas
    phi_antennas = np.linspace(0, 2*np.pi/360*antenna_angular_spacing*(N_antennas), N_antennas + 1)[:-1]
    pos_antennas = np.array([[R_antennas*np.cos(phi), R_antennas*np.sin(phi), antenna_z_offset] for phi in phi_antennas])
    rot_antennas = phi_antennas + np.pi/2
    
    # Background, DUT, and defect
    epsr_bkg = 1.0
    mur_bkg = 1.0
    epsr_mat = 3.0*(1 - 0.01j) ## similar to 3-D printed plastic
    epsr_defect = 2.5*(1 - 0.01j) ## something different than the material
    mur_mat = 1.0
    mur_defect = 1.0
    
    # Set up mesh using gmsh
    gmsh.initialize()
    if comm.rank == model_rank:
        global size
        if(verbose):
            size = pi*R_pml**2*height_pml/h**3 *4 ### a rough estimation. added factor at the end to get closer
            estmem, esttime = memTimeEstimation(size, Nf)
            print('Variables created, generating mesh...')
            print(f'Estimated memory requirement for size {size:.3e}: {estmem:.3f} GB')
            print(f'Estimated computation time for size {size:.3e}, Nf = {Nf}: {esttime/3600:.3f} hours')
        # Typical mesh size
        gmsh.option.setNumber('General.Verbosity', 1)
        gmsh.option.setNumber("Mesh.CharacteristicLengthMin", h) ## minimum mesh size
        gmsh.option.setNumber("Mesh.CharacteristicLengthMax", h) ## max. mesh size
        
        # Create antennas
        antennas_DimTags = []
        x_antenna = np.zeros((N_antennas, 3))
        x_pec = np.zeros((N_antennas, 5, 3)) ### for each antenna, and PEC surface (of which there are 5), a position of that surface
        inAntennaSurface = []
        inPECSurface = []
        for n in range(N_antennas):
            box = gmsh.model.occ.addBox(-antenna_width/2, -antenna_depth, -antenna_height/2, antenna_width, antenna_depth, antenna_height) ## the antenna surface at (0, 0, 0)
            #rect = gmsh.model.occ.addRectangle(-antenna_width/2, -antenna_thickness, 0, antenna_width, antenna_thickness)
            gmsh.model.occ.rotate([(tdim, box)], 0, 0, 0, 0, 0, 1, rot_antennas[n])
            gmsh.model.occ.translate([(tdim, box)], pos_antennas[n,0], pos_antennas[n,1], pos_antennas[n,2])
            antennas_DimTags.append((tdim, box))
            x_antenna[n] = pos_antennas[n, :] ## the translation to the antenna's position
            Rmat = np.array([[np.cos(rot_antennas[n]), -np.sin(rot_antennas[n]), 0],
                             [np.sin(rot_antennas[n]), np.cos(rot_antennas[n]), 0],
                             [0, 0, 1]]) ## matrix for rotation about the z-axis
            x_pec[n, 0] = x_antenna[n] + np.dot(Rmat, np.array([0, -antenna_depth/2, -antenna_height/2])) ## bottom surface (in z)
            x_pec[n, 1] = x_antenna[n] + np.dot(Rmat, np.array([0, -antenna_depth/2,  antenna_height/2])) ## top surface (in z)
            x_pec[n, 2] = x_antenna[n] + np.dot(Rmat, np.array([-antenna_width/2, -antenna_depth/2, 0])) ## left surface (in x)
            x_pec[n, 3] = x_antenna[n] + np.dot(Rmat, np.array([antenna_width/2, -antenna_depth/2, 0])) ## right surface (in x)
            x_pec[n, 4] = x_antenna[n] + np.dot(Rmat, np.array([0, -antenna_depth, 0])) ## back surface (in y)
            inAntennaSurface.append(lambda x: np.allclose(x, x_antenna[n])) ## (0, 0, 0) - the antenna surface
            inPECSurface.append(lambda x: np.allclose(x, x_pec[n,0]) or np.allclose(x, x_pec[n,1]) or np.allclose(x, x_pec[n,2]) or np.allclose(x, x_pec[n,3]) or np.allclose(x, x_pec[n,4]))
    
        # Create object and defect
        matDimTags = []; defectDimTags = []
        sphereActual = gmsh.model.occ.addSphere(0,0,0, R_sphere) ## the actual sphere is my object here
        matDimTags.append((tdim, sphereActual))
        ##possibly make some defects in the sphere, later
    
        # Create domain and PML region
        domain_cyl = gmsh.model.occ.addCylinder(0, 0, -height_dom/2, 0, 0, height_dom, R_dom)
        domain = [(tdim, domain_cyl)] # dim, tags
        pml_cyl = gmsh.model.occ.addCylinder(0, 0, -height_pml/2, 0, 0, height_pml, R_pml)
        pml = [(tdim, pml_cyl)] # dim, tags
        if(d_spheroid>0): ## add a spheroid domed top and bottom with some specified extra height, that passes through the cylindrical 'corner' (to try to avoid waves being parallel to the PML)
            domain_spheroid = gmsh.model.occ.addSphere(0, 0, 0, R_dom+R_extra_spheroid_dom)
            gmsh.model.occ.dilate([(tdim, domain_spheroid)], 0, 0, 0, 1, 1, a_dom)
            domain_extraheight_cyl = gmsh.model.occ.addCylinder(0, 0, -height_dom/2-d_spheroid, 0, 0, height_dom+d_spheroid*2, R_dom)
            domed_ceilings = gmsh.model.occ.intersect([(tdim, domain_spheroid)], [(tdim, domain_extraheight_cyl)])
            domain = gmsh.model.occ.fuse([(tdim, domain_cyl)], domed_ceilings[0])[0] ## [0] to get  dimTags
            
            pml_spheroid = gmsh.model.occ.addSphere(0, 0, 0, R_pml+R_extra_spheroid_pml)
            gmsh.model.occ.dilate([(tdim, pml_spheroid)], 0, 0, 0, 1, 1, a_pml)
            pml_extraheight_cyl = gmsh.model.occ.addCylinder(0, 0, -height_pml/2-d_spheroid, 0, 0, height_pml+d_spheroid*2, R_pml)
            domed_ceilings = gmsh.model.occ.intersect([(tdim, pml_spheroid)], [(tdim, pml_extraheight_cyl)])
            pml = gmsh.model.occ.fuse([(tdim, pml_cyl)], domed_ceilings[0])[0]
    
        # Create fragments and dimtags
        outDimTags, outDimTagsMap = gmsh.model.occ.fragment(pml, domain + matDimTags + defectDimTags + antennas_DimTags)
        removeDimTags = [x for x in [y[0] for y in outDimTagsMap[-N_antennas:]]]
        defectDimTags = [x[0] for x in outDimTagsMap[3:] if x[0] not in removeDimTags]
        matDimTags = [x for x in outDimTagsMap[2] if x not in defectDimTags]
        domainDimTags = [x for x in outDimTagsMap[1] if x not in removeDimTags+matDimTags+defectDimTags]
        pmlDimTags = [x for x in outDimTagsMap[0] if x not in domainDimTags+defectDimTags+matDimTags+removeDimTags]
        gmsh.model.occ.remove(removeDimTags)
        gmsh.model.occ.synchronize()
        
        # Make physical groups for domains and PML
        mat_marker = gmsh.model.addPhysicalGroup(tdim, [x[1] for x in matDimTags])
        defect_marker = gmsh.model.addPhysicalGroup(tdim, [x[1] for x in defectDimTags])
        domain_marker = gmsh.model.addPhysicalGroup(tdim, [x[1] for x in domainDimTags])
        pml_marker = gmsh.model.addPhysicalGroup(tdim, [x[1] for x in pmlDimTags])
    
        # Identify antenna surfaces and make physical groups
        pec_surface = []
        antenna_surface = []
        for boundary in gmsh.model.occ.getEntities(dim=fdim):
            CoM = gmsh.model.occ.getCenterOfMass(boundary[0], boundary[1])
            for n in range(len(inPECSurface)): ## iterate over all of these
                if inPECSurface[n](CoM):
                    pec_surface.append(boundary[1])
            for n in range(len(inAntennaSurface)): ## iterate over all of these
                if inAntennaSurface[n](CoM):
                    antenna_surface.append(boundary[1])
        pec_surface_marker = gmsh.model.addPhysicalGroup(fdim, pec_surface)
        antenna_surface_markers = [gmsh.model.addPhysicalGroup(fdim, [s]) for s in antenna_surface]
        gmsh.model.occ.synchronize()
        gmsh.model.mesh.generate(tdim)
        gmsh.write('tmp.msh')
        if(verbose and comm.rank == model_rank):
            mesht = timer() - startTime
            print('Mesh created in '+str(mesht)+' s')
        if viewGMSH: ## show the mesh, then stop
            gmsh.fltk.run()
            exit()
    else:
        mat_marker = None
        defect_marker = None
        domain_marker = None
        pml_marker = None
        pec_surface_marker = None
        antenna_surface_markers = None
        
    tcomp1 = timer() ## start timing the remainder of the script
        
    mat_marker = comm.bcast(mat_marker, root=model_rank)
    defect_marker = comm.bcast(defect_marker, root=model_rank)
    domain_marker = comm.bcast(domain_marker, root=model_rank)
    pml_marker = comm.bcast(pml_marker, root=model_rank)
    pec_surface_marker = comm.bcast(pec_surface_marker, root=model_rank)
    antenna_surface_markers = comm.bcast(antenna_surface_markers, root=model_rank)
    
    mesh, subdomains, boundaries = dolfinx.io.gmshio.model_to_mesh(gmsh.model, comm=comm, rank=model_rank, gdim=tdim)
    gmsh.finalize()
    
    mesh.topology.create_connectivity(tdim, tdim)
    
    # Set up FEM function spaces and boundary conditions.
    curl_element = basix.ufl.element('N1curl', mesh.basix_cell(), fem_degree)
    Vspace = dolfinx.fem.functionspace(mesh, curl_element)
    
    # Create measures for subdomains and surfaces
    dx = ufl.Measure('dx', domain=mesh, subdomain_data=subdomains, metadata={'quadrature_degree': 5})
    dx_dom = dx((domain_marker, mat_marker, defect_marker))
    dx_pml = dx(pml_marker)
    ds = ufl.Measure('ds', domain=mesh, subdomain_data=boundaries)
    ds_antennas = [ds(m) for m in antenna_surface_markers]
    ds_pec = ds(pec_surface_marker)
    
    # Set up material parameters
    Wspace = dolfinx.fem.functionspace(mesh, ("DG", 0))
    epsr = dolfinx.fem.Function(Wspace)
    mur = dolfinx.fem.Function(Wspace)
    epsr.x.array[:] = epsr_bkg
    mur.x.array[:] = mur_bkg
    mat_cells = subdomains.find(mat_marker)
    mat_dofs = dolfinx.fem.locate_dofs_topological(Wspace, entity_dim=tdim, entities=mat_cells)
    defect_cells = subdomains.find(defect_marker)
    defect_dofs = dolfinx.fem.locate_dofs_topological(Wspace, entity_dim=tdim, entities=defect_cells)
    epsr.x.array[mat_dofs] = epsr_mat
    mur.x.array[mat_dofs] = mur_mat
    epsr.x.array[defect_dofs] = epsr_mat
    mur.x.array[defect_dofs] = mur_mat
    epsr_array_ref = epsr.x.array.copy()
    epsr.x.array[defect_dofs] = epsr_defect
    mur.x.array[defect_dofs] = mur_defect
    epsr_array_dut = epsr.x.array.copy()
    
    Nepsr = len(epsr.x.array[:])
    sizes = comm.gather(Nepsr, root=model_rank)
    if comm.rank == model_rank:
        size = sum(sizes)
        if(verbose):
            print('Pre-calculation estimates:')
            estmem, esttime = memTimeEstimation(size, Nf)
            print('global number of cells from dolfinx directly:', mesh.topology.index_map(2).size_global)
            print('local num:', mesh.topology.index_map(2).size_local)
            print(f'Estimated memory requirement for size {size:.3e}: {estmem:.3f} GB')
            print(f'Estimated computation time for size {size:.3e}, Nf = {Nf}: {esttime/3600:.3f} hours')
    
    # Set up PML layer
    def pml_stretch(y, x, k0, x_dom=0, x_pml=1, n=3, R0=1e-10):
        '''
        Calculates the PML stretching of a coordinate
        :param y: the coordinate to be stretched
        :param x: the coordinate the stretching is based on
        :param k0: wavenumber
        :param x_dom: height of domain
        :param x_pml: height of pml
        :param n: order
        :param R0: intended damping (based on relative strength of reflection?)
        '''
        return y*(1 - 1j*(n + 1)*np.log(1/R0)/(2*k0*np.abs(x_pml - x_dom))*((x - x_dom)/(x_pml - x_dom))**n)
    
    def pml_epsr_murinv(pml_coords):
        '''
        Transforms epsr, mur, using the given stretched coordinates (this implements the pml)
        :param pml_coords: the coordinates
        '''
        J = ufl.grad(pml_coords)
        A = ufl.inv(J)
        epsr_pml = ufl.det(J) * A * epsr * ufl.transpose(A)
        mur_pml = ufl.det(J) * A * mur * ufl.transpose(A)
        murinv_pml = ufl.inv(mur_pml)
        return epsr_pml, murinv_pml
    
    x, y, z = ufl.SpatialCoordinate(mesh)
    r = ufl.real(ufl.sqrt(x**2 + y**2)) ## cylindrical radius. need to set this to real because I compare against it later
    height_dom_spheroid = ufl.conditional(ufl.ge(r, R_dom), height_dom/2, (height_dom/2+d_spheroid)*ufl.real(ufl.sqrt(1-(r/(R_dom+R_extra_spheroid_dom))**2)))   ##whatever the greater height is, spheroid or domain
    height_pml_spheroid = (height_pml/2+d_spheroid)*ufl.sqrt(1-(r/(R_pml+R_extra_spheroid_pml))**2) ##should always be ge the pml cylinder's height
    x_stretched = pml_stretch(x, r, k0, x_dom=R_dom, x_pml=R_pml)
    y_stretched = pml_stretch(y, r, k0, x_dom=R_dom, x_pml=R_pml)
    z_stretched = pml_stretch(z, abs(z), k0, x_dom=height_dom_spheroid, x_pml=height_pml_spheroid) ## /2 since the height is from - to +
    x_pml = ufl.conditional(ufl.ge(abs(r), R_dom), x_stretched, x) ## stretch when outside radius of the domain
    y_pml = ufl.conditional(ufl.ge(abs(r), R_dom), y_stretched, y) ## stretch when outside radius of the domain
    z_pml = ufl.conditional(ufl.ge(abs(z), height_dom_spheroid), z_stretched, z) ## stretch when outside the height of the cylinder of the domain (or oblate spheroid roof with factor a_dom/a_pml - should only be higher/lower inside the domain radially)
    pml_coords = ufl.as_vector((x_pml, y_pml, z_pml))
    epsr_pml, murinv_pml = pml_epsr_murinv(pml_coords)
    
    # Excitation and boundary conditions
    def Eport(x, pol=polarization):
        """
        Compute the normalized electric field distribution in all ports.
        :param x: some given position you want to find the field on
        :param pol: option to change the polarization of the antennas (untested)
        """
        Ep = np.zeros((3, x.shape[1]), dtype=complex)
        for p in range(N_antennas):
            center = pos_antennas[p]
            phi = -rot_antennas[p] # Note rotation by the negative of antenna rotation
            Rmat = np.array([[np.cos(phi), -np.sin(phi), 0],
                             [np.sin(phi), np.cos(phi), 0],
                             [0, 0, 1]]) ## rotation around z
            y = np.transpose(x.T - center)
            loc_x = np.dot(Rmat, y) ### position vector, [x, y, z] presumably, rotated to be in the coordinates the antenna was defined in
            if pol == 'vert': ## vertical (z-) pol, field varies along x
                Ep_loc = np.vstack((0*loc_x[0], 0*loc_x[0], np.cos(kc*loc_x[0])))/np.sqrt(antenna_width/2)
            else: ## horizontal (x-) pol, field varies along z
                Ep_loc = np.vstack((np.cos(kc*loc_x[2])), 0*loc_x[2], 0*loc_x[2])/np.sqrt(antenna_height/2)
                
            #simple, inexact confinement conditions
            #Ep_loc[:,np.sqrt(loc_x[0]**2 + loc_x[1]**2) > antenna_width] = 0 ## no field outside of the antenna's width (circular)
            ##if I confine it to just the 'empty face' of the waveguide thing. After testing, this seems to make no difference to just selecting the entire antenna via a sphere, with the above line
            Ep_loc[:, np.abs(loc_x[0])  > antenna_width*.54] = 0 ## no field outside of the antenna's width
            Ep_loc[:, np.abs(loc_x[1])  > antenna_depth*.04] = 0 ## no field outside of the antenna's depth - origin should be on this face - it is a face so no depth
            #for both
            Ep_loc[:,np.abs(loc_x[2]) > antenna_height*.54] = 0 ## no field outside of the antenna's height.. plus a small extra (no idea if that matters)
            
            Ep_global = np.dot(Rmat, Ep_loc)
            Ep = Ep + Ep_global
        return Ep
    
    Ep = dolfinx.fem.Function(Vspace)
    Ep.interpolate(lambda x: Eport(x))
    
    pec_dofs = dolfinx.fem.locate_dofs_topological(Vspace, entity_dim=fdim, entities=boundaries.find(pec_surface_marker))
    Ezero = dolfinx.fem.Function(Vspace)
    Ezero.x.array[:] = 0.0
    bc_pec = dolfinx.fem.dirichletbc(Ezero, pec_dofs)
    
    # Set up simulation
    E = ufl.TrialFunction(Vspace)
    v = ufl.TestFunction(Vspace)
    curl_E = ufl.curl(E)
    curl_v = ufl.curl(v)
    nvec = ufl.FacetNormal(mesh)
    Zrel = dolfinx.fem.Constant(mesh, 1j)
    k00 = dolfinx.fem.Constant(mesh, 1j)
    a = [dolfinx.fem.Constant(mesh, 1.0 + 0j) for n in range(N_antennas)]
    F_antennas_str = ''
    for n in range(N_antennas):
        F_antennas_str += f"""+ 1j*k00/Zrel*ufl.inner(ufl.cross(E, nvec), ufl.cross(v, nvec))*ds_antennas[{n}] - 1j*k00/Zrel*2*a[{n}]*ufl.sqrt(Zrel*eta0)*ufl.inner(ufl.cross(Ep, nvec), ufl.cross(v, nvec))*ds_antennas[{n}]"""
    F = ufl.inner(1/mur*curl_E, curl_v)*dx_dom \
        - ufl.inner(k00**2*epsr*E, v)*dx_dom \
        + ufl.inner(murinv_pml*curl_E, curl_v)*dx_pml \
        - ufl.inner(k00**2*epsr_pml*E, v)*dx_pml + eval(F_antennas_str)
    bcs = [bc_pec]
    lhs, rhs = ufl.lhs(F), ufl.rhs(F)
    petsc_options = {"ksp_type": "preonly", "pc_type": "lu", "pc_factor_mat_solver_type": "mumps"} ## try looking this up to see if some other options might be better
    problem = dolfinx.fem.petsc.LinearProblem(
        lhs, rhs, bcs=bcs, petsc_options=petsc_options
    )
    
    def ComputeFields():
        '''
        Computes the fields
        '''
        S = np.zeros((Nf, N_antennas, N_antennas), dtype=complex)
        solutions = []
        for nf in range(Nf):
            print(f'Rank {comm.rank}: Frequency {nf+1} / {Nf}')
            sys.stdout.flush()
            k00.value = 2*np.pi*fvec[nf]/c0
            Zrel.value = k00.value/np.sqrt(k00.value**2 - kc**2)
            sols = []
            for n in range(N_antennas):
                for m in range(N_antennas):
                    a[m].value = 0.0
                a[n].value = 1.0
                E_h = problem.solve()
                for m in range(N_antennas):
                    factor = dolfinx.fem.assemble.assemble_scalar(dolfinx.fem.form(2*ufl.sqrt(Zrel*eta0)*ufl.inner(ufl.cross(Ep, nvec), ufl.cross(Ep, nvec))*ds_antennas[m]))
                    factors = comm.gather(factor, root=model_rank)
                    if comm.rank == model_rank:
                        factor = sum(factors)
                    else:
                        factor = None
                    factor = comm.bcast(factor, root=model_rank)
                    b = dolfinx.fem.assemble.assemble_scalar(dolfinx.fem.form(ufl.inner(ufl.cross(E_h, nvec), ufl.cross(Ep, nvec))*ds_antennas[m] + Zrel/(1j*k0)*ufl.inner(ufl.curl(E_h), ufl.cross(Ep, nvec))*ds_antennas[m]))/factor
                    bs = comm.gather(b, root=model_rank)
                    if comm.rank == model_rank:
                        b = sum(bs)
                    else:
                        b = None
                    b = comm.bcast(b, root=model_rank)
                    S[nf,m,n] = b
                sols.append(E_h.copy())
            solutions.append(sols)
        return S, solutions
    
    print(f'Rank {comm.rank}: Computing REF solutions')
    sys.stdout.flush()
    epsr.x.array[:] = epsr_array_ref
    S_ref, solutions_ref = ComputeFields()
    if(not reference):
        print(f'Rank {comm.rank}: Computing DUT solutions')
        sys.stdout.flush()
        epsr.x.array[:] = epsr_array_dut
        S_dut, solutions_dut = ComputeFields()
    
    print(f'Rank {comm.rank}: Computing optimization vectors')
    sys.stdout.flush()
    
    if(not reference):
        b = np.zeros(Nf*N_antennas*N_antennas, dtype=complex)
    # Create function space for temporary interpolation
    q = dolfinx.fem.Function(Wspace)
    bb_tree = dolfinx.geometry.bb_tree(mesh, mesh.topology.dim)
    cell_volumes = dolfinx.fem.assemble_vector(dolfinx.fem.form(ufl.conj(ufl.TestFunction(Wspace))*ufl.dx)).array
    def q_func(x, Em, En, k0, conjugate=False):
        '''
        Does stuff
        :param x:
        :param Em:
        :param En:
        :param k0:
        :param conjugate:
        '''
        cells = []
        cell_candidates = dolfinx.geometry.compute_collisions_points(bb_tree, x.T)
        colliding_cells = dolfinx.geometry.compute_colliding_cells(mesh, cell_candidates, x.T)
        for i, point in enumerate(x.T):
            if len(colliding_cells.links(i)) > 0:
                cells.append(colliding_cells.links(i)[0])
        Em_vals = Em.eval(x.T, cells)
        En_vals = En.eval(x.T, cells)
        if conjugate:
            En_vals = np.conjugate(En_vals)
        values = -1j*k0/eta0/2*(Em_vals[:,0]*En_vals[:,0] + Em_vals[:,1]*En_vals[:,1] + Em_vals[:,2]*En_vals[:,2])*cell_volumes
        return values
    
    xdmf = dolfinx.io.XDMFFile(comm=comm, filename=folder+runName+'output.xdmf', file_mode='w')
    xdmf.write_mesh(mesh)
    epsr.x.array[:] = cell_volumes
    xdmf.write_function(epsr, -3)
    epsr.x.array[:] = epsr_array_ref
    xdmf.write_function(epsr, -2)
    epsr.x.array[:] = epsr_array_dut
    xdmf.write_function(epsr, -1)
    for nf in range(Nf):
        print(f'Rank {comm.rank}: Frequency {nf+1} / {Nf}')
        sys.stdout.flush()
        k0 = 2*np.pi*fvec[nf]/c0
        for m in range(N_antennas):
            Em_ref = solutions_ref[nf][m]
            for n in range(N_antennas):
                #En_dut = solutions_dut[nf][n] ## only using Eref*Eref right now
                En_ref = solutions_ref[nf][n]
                # Case Eref*Eref
                if(not reference): ## ref must compute b later
                    b[nf*N_antennas*N_antennas + m*N_antennas + n] = S_dut[nf, m, n] - S_ref[nf, n, m]
                q.interpolate(functools.partial(q_func, Em=Em_ref, En=En_ref, k0=k0, conjugate=False))
                # The function q is one row in the A-matrix, save it to file
                xdmf.write_function(q, nf*N_antennas*N_antennas + m*N_antennas + n)
    xdmf.close()
    
    
    if comm.rank == model_rank: # Save global values for further postprocessing
        compt = timer() - tcomp1
        print('Computations completed in',compt,'s,',compt/3600,'hours.')# Max. memory usage:',mem_usage,'MiB')
        
        
        ###if trying to plot phase, save the final freq. point as different timestamps:
        if(True): ### make this True to make a phase-animation of the final fields (cannot figure out how to do this inside paraview)
            xdmf2 = dolfinx.io.XDMFFile(comm=comm, filename=folder+runName+'outputPhaseAnimation.xdmf', file_mode='w')
            xdmf2.write_mesh(mesh)
            Nframes = 50
            for i in range(Nframes):
                epsr.x.array[:] = q.x.array*np.exp(1j*i*2*pi/Nframes)
                xdmf2.write_function(epsr, i)
            xdmf2.close()
        ###
        
        global totT
        totT = compt+mesht
        if(reference): ## less stuff to save
            np.savez(folder+runName+'output.npz', fvec=fvec, S_ref=S_ref, epsr_mat=epsr_mat, epsr_defect=epsr_defect)
        else:
            np.savez(folder+runName+'output.npz', b=b, fvec=fvec, S_ref=S_ref, S_dut=S_dut, epsr_mat=epsr_mat, epsr_defect=epsr_defect)
    
    ### save mem/time requirements for later use
    
    ### could possibly try adapting the 2D video-plotting here

##MAIN STUFF
if __name__ == '__main__':
    args = sys.argv[1:] ## can take the number of MPI processes as an argument. If not given, just say 0. Current not used anywhere.
    if(len(args) == 0):
        MPInum = 1
    else:
        MPInum = args[0]
    print('Expected number of MPI processes:', MPInum)
    # MPI settings
    comm = MPI.COMM_WORLD
    model_rank = 0
    
    runName = 'smallTest' ## one antenna, no object. testing domed domain and pml
    folder = 'data3D/'
    
    if(comm.rank == model_rank):
        print('Scatt3D start:')
    memTimeEstimation(printPlots = True)
    #memTimeEstimation(printPlots = True)
    ## to get a good memory usage, call the calculations with memory_usage, passing in args and kwargs
    ## with MPI, each process seems to take about the same amount of memory
    mem_usage = MPInum * memory_usage((runScatt3d, (runName,), {'folder' : folder, 'reference' : True, 'viewGMSH' : True}), max_usage = True) 
    
    print('Max. memory:',mem_usage/1000,'GiB'+f"{MPI.COMM_WORLD.rank=} {MPI.COMM_WORLD.size=}, {MPI.COMM_SELF.rank=} {MPI.COMM_SELF.size=}")
    if(comm.rank == model_rank):
        memTimeAppend(size, Nf, mem_usage/1000, totT, reference=False) ## '0' memory cost to ignore this one (or later fill in manually) - not sure how to easily estimate this without slowing the code
        